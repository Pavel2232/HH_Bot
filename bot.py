import re

from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import StatesGroup, State
from aiogram.utils import executor
from aiogram.utils.markdown import hlink, hbold
from environs import Env
import logging
from aiogram import Bot, Dispatcher, types
from aiogram.dispatcher.filters import Text

from DataClass import DetailVacancyResponse
from main import HeadHunterPars

env = Env()
env.read_env('.env_ci')
logging.basicConfig(level=logging.INFO)
bot = Bot(token=env('TG_TOKEN'))
dp = Dispatcher(bot, storage=MemoryStorage())
hh = HeadHunterPars(params={})
KEY = ''


class StateParamas(StatesGroup):
    text = State()
    area = State()
    end = State()


@dp.message_handler(commands=["start"])
async def cmd_start(message: types.Message):
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True, input_field_placeholder='–°—Ç–∞—Ä—Ç', one_time_keyboard=True)
    markup.add(types.KeyboardButton(text='–Ω–∞—á–∞—Ç—å'))
    await message.answer("–ü—Ä–∏–≤–µ—Ç! \n –Ø –±–æ—Ç –∫–æ—Ç–æ—Ä—ã–π –ø–æ–º–æ–∂–µ—Ç –Ω–∞–π—Ç–∏ —Ä–∞–±–æ—Ç—É!", reply_markup=markup)


@dp.message_handler(Text(equals='—Å–±—Ä–æ—Å –ø–æ–∏—Å–∫–∞'))
async def reset(message: types.Message, state: FSMContext):
    await state.reset_state()
    await cmd_start(message)


@dp.message_handler(Text(equals='–Ω–∞—á–∞—Ç—å'))
async def text(message: types.Message):
    await message.answer("–≤–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≤–∞–∫–∞–Ω—Å–∏–∏")
    await StateParamas.text.set()


@dp.message_handler(Text(equals='—Å–æ–ø—Ä–æ–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ–µ –ø–∏—Å—å–º–æ —Å–æ–∑–¥–∞—Ç—å?'))
async def create_letter(message: types.Message):
    markup = markup = types.ReplyKeyboardMarkup(resize_keyboard=True, input_field_placeholder='–Ω–∞–∑–∞–¥')
    markup.add(types.KeyboardButton(text='üëà–Ω–∞–∑–∞–¥'))
    markup.add(types.KeyboardButton(text='—Å–±—Ä–æ—Å –ø–æ–∏—Å–∫–∞'))
    vacancy: DetailVacancyResponse = hh.dict_vacancy.get(KEY)
    my_letter = f'''–î–æ–±—Ä—ã–π –¥–µ–Ω—å!
–ü—Ä–æ—à—É —Ä–∞—Å—Å–º–æ—Ç—Ä–µ—Ç—å –º–æ–µ —Ä–µ–∑—é–º–µ –Ω–∞ –≤–∞–∫–∞–Ω—Å–∏—é "{vacancy.name}".
–£–≤–µ—Ä–µ–Ω, —á—Ç–æ –º–æ–≥—É –±—ã—Ç—å –≤–∞–º –ø–æ–ª–µ–∑–µ–Ω, —Ç–∞–∫ –∫–∞–∫:
- –ó–Ω–∞—é —Ç–µ–æ—Ä–∏—é –∏ –æ—Å–Ω–æ–≤—ã Python-–ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—è,
- –û–±–ª–∞–¥–∞—é –Ω–∞–≤—ã–∫–∞–º–∏ —Ä–∞–±–æ—Ç—ã —Å —Ñ—Ä–µ–π–º–≤–æ—Ä–∫–∞–º–∏ Flask –∏ Django,
- –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–ª Git,Yandex cloud
- –ó–Ω–∞—é SQL: —É–º–µ–Ω–∏–µ –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞—Ç—å –∏ —Å–æ—Å—Ç–∞–≤–ª—è—Ç—å —Å–ª–æ–∂–Ω—ã–µ SQL-–∑–∞–ø—Ä–æ—Å—ã, PostgreSQL,
- –û–±–ª–∞–¥–∞—é –±–∞–∑–æ–≤—ã–º–∏ –∑–Ω–∞–Ω–∏—è–º–∏ ORM –∏ –º–∏–≥—Ä–∞—Ü–∏–π,
- –ï—Å—Ç—å –Ω–∞–≤—ã–∫–∏ —Ä–∞–±–æ—Ç—ã —Å SQlite3 –∏ PostgreSQL,
- –ó–Ω–∞—é HTML –∏ CSS –Ω–∞ –±–∞–∑–æ–≤–æ–º —É—Ä–æ–≤–Ω–µ,
- –ó–Ω–∞—é Docker –∏ Docker-—Åompose,
- –û–±–ª–∞–¥–∞—é –±–∞–∑–æ–≤—ã–º–∏ –∑–Ω–∞–Ω–∏—è–º–∏ CI/CD,
- –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–ª –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è,
- –ü–æ–Ω–∏–º–∞—é JWT, OAuth2.0,
- –£–º–µ—é —Ä–∞–±–æ—Ç–∞—Ç—å –≤ –∫–æ–º–∞–Ω–¥–µ –∏ –≤ –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ.
–í–∞—à–∞ –∫–æ–º–ø–∞–Ω–∏—è –º–µ–Ω—è –∑–∞–∏–Ω—Ç–µ—Ä–µ—Å–æ–≤–∞–ª–∞ —É –≤–∞—Å –æ—á–µ–Ω—å –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã–π –ø—Ä–æ–µ–∫—Ç –∏ —è –±–µ–∑—É–º–Ω–æ —Ö–æ—á—É –≤ –Ω–µ–º –ø–æ—É—á–∞—Å—Ç–≤–æ–≤–∞—Ç—å. 
–£–≤–µ—Ä–µ–Ω, —á—Ç–æ —Å–ø—Ä–∞–≤–ª—é—Å—å —Å –ø–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã–º–∏ –∑–∞–¥–∞—á–∞–º–∏ –Ω–∞ 100%, —Ç–∞–∫ –∫–∞–∫ —É–∂–µ —Ä–µ—à–∞–ª –ø–æ–¥–æ–±–Ω—ã–µ –∫–µ–π—Å—ã –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ –æ–±—É—á–µ–Ω–∏—è –∏ –ø—Ä–∞–∫—Ç–∏–∫–∏. 
–ë—É–¥—É —Ä–∞–¥ —Å—Ç–∞—Ç—å —á–∞—Å—Ç—å—é –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–æ–π –∫–æ–º–∞–Ω–¥—ã. –ì–æ—Ç–æ–≤ –ø–æ–¥—Ä–æ–±–Ω–æ —Ä–∞—Å—Å–∫–∞–∑–∞—Ç—å –æ —Å–≤–æ—ë–º –æ–ø—ã—Ç–µ –∏ –∑–Ω–∞–Ω–∏—è—Ö.
–ú–∞–∑–∏–∫–∏–Ω –ü–∞–≤–µ–ª
—Ç–µ–ª. 8-977-729-48-38
GitHub: https://github.com/Pavel2232
E-mail pavelmazikinvladimirovich@gmail.com
–ë—É–¥—É –æ—á–µ–Ω—å –±–ª–∞–≥–æ–¥–∞—Ä–µ–Ω –∑–∞ –ª—é–±—É—é –æ–±—Ä–∞—Ç–Ω—É—é —Å–≤—è–∑—å.'''
    await message.answer(my_letter, reply_markup=markup)


@dp.message_handler(state=StateParamas.text)
async def tt(message: types.Message, state: FSMContext):
    await state.update_data(chosen_text=message.text.lower())
    await StateParamas.area.set()
    chouse = types.ReplyKeyboardMarkup(resize_keyboard=True, input_field_placeholder='–í—ã–±–∏—Ä–µ—Ç–µ')
    chouse.add(types.KeyboardButton(text='–ú–æ—Å–∫–≤–∞'))
    chouse.add(types.KeyboardButton(text='–†–æ—Å—Å–∏—è'))
    await message.answer('–≤—ã–±–µ—Ä–µ—Ç–µ', reply_markup=chouse)


@dp.message_handler(Text(equals='üëâ–¥–∞–ª–µ–µ'))
async def next_page(message: types.Message):
    hh.netx_page(1)
    await get(message)


@dp.message_handler(state=StateParamas.area)
async def tt(message: types.Message, state: FSMContext):
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True, input_field_placeholder='–í—ã–±–∏—Ä–µ—Ç–µ')
    markup.add(types.KeyboardButton(text='–ø–æ–ª—É—á–∏—Ç—å –≤–∞–∫–∞–Ω—Å–∏–∏'))
    markup.add(types.KeyboardButton(text='—Å–±—Ä–æ—Å –ø–æ–∏—Å–∫–∞'))
    if message.text.lower() == '–º–æ—Å–∫–≤–∞':
        await state.update_data(area=1)
    elif message.text.lower() == '—Ä–æ—Å—Å–∏—è':
        await state.update_data(area=113)
    await StateParamas.end.set()
    await state.reset_state(with_data=False)
    text = await state.get_data()
    if text.get('area') != None:
        hh.set_params(text=text.get('chosen_text'), area=text.get('area'), page=0, per_page=5)
        await message.answer('–ì–æ—Ç–æ–≤—ã –∫ –ø–æ–∏—Å–∫—É', reply_markup=markup)
    else:
        await StateParamas.area.set()
        await message.answer('–≤–≤–µ–¥–∏—Ç–µ –ú–æ—Å–∫–≤–∞ –∏–ª–∏ –†–æ—Å—Å–∏—è')


@dp.message_handler(Text(equals='–ø–æ–ª—É—á–∏—Ç—å –≤–∞–∫–∞–Ω—Å–∏–∏'))
async def get(message: types.Message):
    markup = markup = types.ReplyKeyboardMarkup(resize_keyboard=True, input_field_placeholder='—Å–ª–µ–¥—É—é—â–∞—è')
    markup.add(types.KeyboardButton(text='üëâ–¥–∞–ª–µ–µ'))
    markup.add(types.KeyboardButton(text='—Å–±—Ä–æ—Å –ø–æ–∏—Å–∫–∞'))
    itog = hh.get_detail_vacancy()
    for vacancy in itog:
        card = f'{hlink(vacancy.name, vacancy.alternate_url)}\n' \
               f'{hbold("–û–ø–∏—Å–∞–Ω–∏–µ: ")}{vacancy.description[:50]}‚ù§Ô∏è‚Äçüî•'
        await message.answer(card, reply_markup=markup)


@dp.message_handler(content_types=['text'])
async def test_text(message: types.Message):
    try:
        key = message.reply_to_message.text.split('"')[1]
        global KEY
        KEY = key
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True, input_field_placeholder='–í—ã–±–∏—Ä–µ—Ç–µ',
                                           one_time_keyboard=True)
        markup.add(types.KeyboardButton(text='—Å–æ–ø—Ä–æ–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ–µ –ø–∏—Å—å–º–æ —Å–æ–∑–¥–∞—Ç—å?'))
        markup.add(types.KeyboardButton(text='—Å–±—Ä–æ—Å –ø–æ–∏—Å–∫–∞'))
        markup.add(types.KeyboardButton(text='üëâ–¥–∞–ª–µ–µ'))
        tt = hh.dict_vacancy.get(key)
        card = f'{hlink(tt.name, key)}\n' \
               f'{hbold("–û–ø–∏—Å–∞–Ω–∏–µ: ")}{re.sub("<(.*?)>", " ", tt.description)}‚ù§Ô∏è‚Äçüî•'
        await message.answer(card, reply_markup=markup)
    except AttributeError:
        await message.answer("–ü—Ä–æ—Å—Ç–æ —Ç–µ–∫—Å—Ç –±–æ—Ç –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç")


if __name__ == "__main__":
    executor.start_polling(dp)
